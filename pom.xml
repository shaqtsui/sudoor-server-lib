<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!--
		NOTE :
			sudoor Lib Project Provide Interface:
				CORS filter

				Spring Security for login

				Olingo for OData service
				CXF for REST router to Utils

				JPAManager
	-->

	<!-- The Basics -->
	<parent>
		<groupId>net.gplatform</groupId>
		<artifactId>sudoor-server-parent</artifactId>
		<version>1.0.18</version>
		<relativePath />
	</parent>

	<artifactId>sudoor-server-lib</artifactId>
	<version>1.1.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<properties>
		<packaging.executable.disabled>true</packaging.executable.disabled>
		<!-- If update to 3.0.5+ get error: 
			1, javax.ws.rs.client.ResponseProcessingException: No message body reader has been found for class boolean, ContentType: application/octet-stream;charset=UTF-8
				as PrimitiveTextProvider.isSupported() need to check mt.isCompatible(MediaType.TEXT_PLAIN_TYPE) from 3.0.5. So need to specify @Produces(MediaType.TEXT_PLAIN) 
			2, Incorrectly parse "Set-Cookie: SESSION=17d74ede-aac0-4e65-95d6-0b62079b41a9; Path=/sudoor/; HttpOnly" to {HttpOnly=HttpOnly=HttpOnly;Path=/sudoor/;Version=1} 
				when 302 response
			-->
		<cxf.version>3.1.4</cxf.version>
		<!-- jackson 2.3.3 already included by spring boot, so here include jackson.jaxrs 2.3.3-->
		<com.fasterxml.jackson.jaxrs.version>2.5.4</com.fasterxml.jackson.jaxrs.version>
		<org.apache.olingo.version>2.0.3</org.apache.olingo.version>
		<kaptcha.version>0.0.9</kaptcha.version>
		
		<!-- overwrite parent definition -->
		<runtime.websvr.port>8080</runtime.websvr.port>
	</properties>

	<dependencies>
		<!-- spring-boot-starter start -->
		<!-- used to track app status -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jolokia</groupId>
			<artifactId>jolokia-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-remote-shell</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-redis</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
<!-- 			<exclusions> -->
<!-- 				<exclusion> -->
<!-- 					<groupId>org.springframework.boot</groupId> -->
<!-- 					<artifactId>spring-boot-starter-tomcat</artifactId> -->
<!-- 				</exclusion> -->
<!-- 			</exclusions> -->
		</dependency>
<!-- 		<dependency> -->
<!-- 			<groupId>org.springframework.boot</groupId> -->
<!-- 			<artifactId>spring-boot-starter-undertow</artifactId> -->
<!-- 		</dependency> -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
<!-- 			<exclusions> -->
<!-- 				<exclusion> -->
<!-- 					<groupId>org.hibernate</groupId> -->
<!-- 					<artifactId>hibernate-entitymanager</artifactId> -->
<!-- 				</exclusion> -->
<!-- 			</exclusions> -->
		</dependency>
		<!-- use  eclipselink to replace hibernate to avoid hibernate temporal literal issue. bug: HHH-8653
			To use eclipselink need to speify *QL for "in" clause due to bug: 349477
			Also txn need to be confinged for eclipselink
		-->
<!-- 		<dependency> -->
<!-- 			<groupId>org.eclipse.persistence</groupId> -->
<!-- 			<artifactId>eclipselink</artifactId> -->
<!-- 			<version>2.5.2</version> -->
<!-- 		</dependency> -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jta-bitronix</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-batch</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-social-linkedin</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-social-twitter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-social-facebook</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-integration</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.integration</groupId>
			<artifactId>spring-integration-ftp</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
		</dependency>
<!-- 		<dependency> -->
<!-- 			<groupId>org.springframework.boot</groupId> -->
<!-- 			<artifactId>spring-boot-starter-jersey</artifactId> -->
<!-- 		</dependency> -->
		<!-- jersey client for rest test, but we recommend to use RestTemplate 
		<dependency>
		    <groupId>org.glassfish.jersey.core</groupId>
		    <artifactId>jersey-client</artifactId>
		    <version>2.13</version>
		</dependency>
		-->
		<!-- for Generating your own meta-data for @ConfigurationProperties -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
		</dependency>
		<!-- spring-boot-starter end -->
		
		<!-- spring project  start -->
		<dependency>
			<groupId>org.springframework.session</groupId>
			<artifactId>spring-session</artifactId>
		</dependency>
		<!-- spring project  end -->
		
		<!-- Infra Comp start -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
		</dependency>
		<!-- Infra Comp end -->
		
		<!-- cxf start -->
		<!-- use cxf to provider ws support, as spring ws only support contract-first approach which is a effort consuming approach -->
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-frontend-jaxws</artifactId>
			<version>${cxf.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-transports-http</artifactId>
			<version>${cxf.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-ws-security</artifactId>
			<version>${cxf.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-frontend-jaxrs</artifactId>
			<version>${cxf.version}</version>
		</dependency>
		<!-- Providers in cxf-rt-rs-extension-providers can only handle jaxb object & primiry object -->
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-extension-providers</artifactId>
			<version>${cxf.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-client</artifactId>
			<version>${cxf.version}</version>
		</dependency>
		<!-- jackson 2.3.3 already included by spring boot -->
		<!-- Providers in jackson-jaxrs-json-provider can handle pojo -->
		<dependency>
			<groupId>com.fasterxml.jackson.jaxrs</groupId>
			<artifactId>jackson-jaxrs-json-provider</artifactId>
			<version>${com.fasterxml.jackson.jaxrs.version}</version>
		</dependency>
		<!-- cxf end -->

		<!-- other project start -->
		<dependency>
			<groupId>com.github.axet</groupId>
			<artifactId>kaptcha</artifactId>
			<version>${kaptcha.version}</version>
		</dependency>
		<dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-infinispan</artifactId>
			<version>4.3.8.Final</version>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>
		<!-- other project end -->
	</dependencies>

	<!-- Build Settings -->
	<build>
		<plugins>
			<!-- skip this plugin to avoid full package used as dependency -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<skip>${packaging.executable.disabled}</skip>
				</configuration>
			</plugin>
		</plugins>
	</build>
	
	<!-- Environment Settings -->
	<issueManagement>
		<system>GitHub</system>
		<url>https://github.com/xfcjscn/sudoor-server-lib/issues</url>
	</issueManagement>
	<scm>
		<connection>scm:git:https://github.com/xfcjscn/sudoor-server-lib.git</connection>
		<developerConnection>scm:git:https://github.com/xfcjscn/sudoor-server-lib.git</developerConnection>
		<url>https://github.com/xfcjscn/sudoor-server-lib</url>
		<tag>HEAD</tag>
	</scm>
</project>
